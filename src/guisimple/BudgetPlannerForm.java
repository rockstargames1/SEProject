/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guisimple;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

/**
 *
 * @author kishl_000
 */
public class BudgetPlannerForm extends javax.swing.JFrame {

    /**
     * Creates new form BudgetPlannerForm
     */
    DatabaseStudent db;
    String sql = "select amount from budget where use='acc_bal';";
    
    public BudgetPlannerForm() {
        initComponents();
        setResizable(false);
        db = new DatabaseStudent();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        deposit = new javax.swing.JButton();
        expdCheck = new javax.swing.JButton();
        UpdtExpd = new javax.swing.JButton();
        withdraw = new javax.swing.JButton();
        extraExp = new javax.swing.JButton();
        addWeeklyExp = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("Rs. 0");

        deposit.setText("Deposit");
        deposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositActionPerformed(evt);
            }
        });

        expdCheck.setText("Check Expenditures");
        expdCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expdCheckActionPerformed(evt);
            }
        });

        UpdtExpd.setText("Update Weekly Expenditures");
        UpdtExpd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdtExpdActionPerformed(evt);
            }
        });

        withdraw.setText("Withdrawal");
        withdraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawActionPerformed(evt);
            }
        });

        extraExp.setText("Extra Expenditure");
        extraExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extraExpActionPerformed(evt);
            }
        });

        addWeeklyExp.setText("Add Weekly Expenditure");
        addWeeklyExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addWeeklyExpActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deposit)
                            .addComponent(UpdtExpd)
                            .addComponent(extraExp))
                        .addGap(81, 81, 81)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(expdCheck)
                            .addComponent(withdraw)
                            .addComponent(addWeeklyExp)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(313, 313, 313)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(148, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deposit)
                    .addComponent(withdraw))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UpdtExpd)
                    .addComponent(expdCheck))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(extraExp)
                    .addComponent(addWeeklyExp))
                .addContainerGap(101, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    //Deposit
    
    
    
    private void depositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositActionPerformed
        // TODO add your handling code here:
        try {
        String sql = "select amount from budget where use='acc_bal';";
        ResultSet rs = db.stmt.executeQuery(sql);
        JTextField bal = new JTextField("Enter Deposit Amount");
     final JComponent[] inputs = new JComponent[] {
		new JLabel("Current Bal: "+rs.getInt(1))
             ,bal
};

int result = JOptionPane.showConfirmDialog(null, inputs, "Deposit", JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);

    if(result == JOptionPane.OK_OPTION)
        {
    
     sql = "update  budget set amount=" +(Integer.parseInt(bal.getText())+rs.getInt(1)) +" where use='acc_bal';";
            try {
                System.out.println(sql);
                db.stmt.execute(sql);
                } 
            catch (SQLException ex1) {
                System.err.println(ex1);
                }
        }
}
catch(SQLException ex)
    {
        System.err.println(ex);
    }
    }//GEN-LAST:event_depositActionPerformed

    
    //Withdrawal
    
    
    private void withdrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawActionPerformed
        // TODO add your handling code here:
        try {
        String sql = "select amount from budget where use='acc_bal';";
        ResultSet rs = db.stmt.executeQuery(sql);
        JTextField wamt = new JTextField("Enter Withdraw Amount");
     final JComponent[] inputs = new JComponent[] {
		new JLabel("Cuurent Bal: "+rs.getInt(1))
             ,wamt
};

int result = JOptionPane.showConfirmDialog(null, inputs, "Withdraw", JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);

    if(result == JOptionPane.OK_OPTION)
        {
            int w = Integer.parseInt(wamt.getText());
            if(w <= rs.getInt(1))
            {
                sql = "update  budget set amount=" + (rs.getInt(1)-w) +" where use='acc_bal';";
                System.out.println(sql);
                db.stmt.executeUpdate(sql);
                sql = "update  budget set amount=amount+" + w +" where use='rem_amt';";
                System.out.println(sql);
                db.stmt.executeUpdate(sql);
                loadData();
            }
            else
                JOptionPane.showMessageDialog(null, "Not Enough Balance");
        }
}
catch(SQLException ex)
    {
        System.err.println(ex);
    }       
        
    }//GEN-LAST:event_withdrawActionPerformed

    
    
    //Add new Weekly Expenditure
    
    
    
    private void addWeeklyExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addWeeklyExpActionPerformed
        // TODO add your handling code here:
        JTextField type = new JTextField();
        JTextField amount = new JTextField();
        JComponent input[] = new JComponent[]{
                new JLabel("Type (Max 15 Chars)"),
                type,
                new JLabel("Amount"),
                amount
        };
        int result = JOptionPane.showConfirmDialog(null, input, "New Weekly Expenditure", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);
        if(result == JOptionPane.OK_OPTION)
        {
            try {
                String sql = "insert into budget values('" +type.getText()+ "'," +amount.getText()+ ");";
                System.out.println(sql);
                db.stmt.execute(sql);
               
            }
            catch(SQLException ex) {
                System.err.println(ex);
            }
            
        }
    }//GEN-LAST:event_addWeeklyExpActionPerformed

    
    //Weekly Updates
    
    
    private void UpdtExpdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdtExpdActionPerformed
        // TODO add your handling code here:
        try {
            //Get Remaining Amount
            int rem = Integer.parseInt(jLabel1.getText().substring(4));
            int sum = 0;
            //Get the Expenditures
            String sql = "select amount from budget where use <> 'acc_bal' and use <> 'rem_amt' and use <> 'weeklybudget';";
            ResultSet rs = db.stmt.executeQuery(sql);
            
            //Update the Expenditures
            while(rs.next())
                sum+=rs.getInt(1);
            
            //Update Remaining amount
            if(sum <= rem)
            {
                sql = "update  budget set amount=" + (rem-sum) +" where use='rem_amt';";
                System.out.println(sql);
                db.stmt.executeUpdate(sql);
                JOptionPane.showMessageDialog(rootPane, "Successfullly Updated");
                loadData();
            }
            else
                JOptionPane.showMessageDialog(rootPane, "Insufficient Balance");
        }
        catch(SQLException ex)
        {
            System.err.println(ex);
        }
        
    }//GEN-LAST:event_UpdtExpdActionPerformed

    
    //Extra Expenditure
    
    
    private void extraExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extraExpActionPerformed
        // TODO add your handling code here:
        try {
            JTextField  amt = new JTextField();
            JComponent  inputs[] = new JComponent[] {
                new JLabel("Enter Amount"),
                amt
            };
            int result = JOptionPane.showConfirmDialog(null, inputs, "Extra Expenditure Amount", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);
            if(result == JOptionPane.OK_OPTION)
            {
                int rem = (Integer.parseInt(jLabel1.getText().substring(4)) - Integer.parseInt(amt.getText()));
                String sql = "update budget set amount="+rem+" where use='rem_amt';";
                System.out.println(sql);
                db.stmt.executeUpdate(sql);
                loadData();
            }
        }
        catch(SQLException ex) {
            System.err.println(ex);
        }
    }//GEN-LAST:event_extraExpActionPerformed

    
    //Check Weekly Expenditures
    
    
    private void expdCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expdCheckActionPerformed
        // TODO add your handling code here:
        try {
            JComponent inputs[] = new JComponent[10];
            int count=0;
            String sql = "select * from budget where use <> 'acc_bal' and use <> 'rem_amt' and use <> 'weeklybudget';";
            System.out.println(sql);
            ResultSet rs = db.stmt.executeQuery(sql);
            while(rs.next())
            {
                inputs[count++] = new JLabel(rs.getString(1)+ ":" +rs.getInt(2));
            }
        JOptionPane.showMessageDialog(null, inputs, "Weekly Expenditures List", JOptionPane.PLAIN_MESSAGE, null);
        }
        catch(SQLException ex) {
            System.err.println(ex);
        }
    }//GEN-LAST:event_expdCheckActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BudgetPlannerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BudgetPlannerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BudgetPlannerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BudgetPlannerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BudgetPlannerForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton UpdtExpd;
    private javax.swing.JButton addWeeklyExp;
    private javax.swing.JButton deposit;
    private javax.swing.JButton expdCheck;
    private javax.swing.JButton extraExp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JButton withdraw;
    // End of variables declaration//GEN-END:variables

    private void loadData() {
        
        try {
            //Load Data
            
            String sql = "select amount from budget where use='rem_amt';";
            System.out.println(sql);
            ResultSet rs = db.stmt.executeQuery(sql);
            jLabel1.setText("Rs. "+rs.getInt(1));
                        
        } catch (SQLException ex) {
            System.err.println(ex);
        }
    }
}
